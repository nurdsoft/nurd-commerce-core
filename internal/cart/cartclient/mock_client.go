// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cart/cartclient/client.go

// Package cartclient is a generated GoMock package.
package cartclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/cart/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCart mocks base method.
func (m *MockClient) GetCart(ctx context.Context) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockClientMockRecorder) GetCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockClient)(nil).GetCart), ctx)
}

// GetCartItems mocks base method.
func (m *MockClient) GetCartItems(ctx context.Context) (*entities.GetCartItemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", ctx)
	ret0, _ := ret[0].(*entities.GetCartItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockClientMockRecorder) GetCartItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockClient)(nil).GetCartItems), ctx)
}

// GetShippingRateByID mocks base method.
func (m *MockClient) GetShippingRateByID(ctx context.Context, shippingRateID uuid.UUID) (*entities.CartShippingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingRateByID", ctx, shippingRateID)
	ret0, _ := ret[0].(*entities.CartShippingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingRateByID indicates an expected call of GetShippingRateByID.
func (mr *MockClientMockRecorder) GetShippingRateByID(ctx, shippingRateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingRateByID", reflect.TypeOf((*MockClient)(nil).GetShippingRateByID), ctx, shippingRateID)
}
