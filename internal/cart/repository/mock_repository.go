// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cart/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/cart/entities"
	json "github.com/nurdsoft/nurd-commerce-core/shared/json"
	decimal "github.com/shopspring/decimal"
	gorm "gorm.io/gorm"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// WithContext mocks base method.
func (m *MockTransaction) WithContext(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockTransactionMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockTransaction)(nil).WithContext), ctx)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCartItem mocks base method.
func (m *MockRepository) AddCartItem(ctx context.Context, tx Transaction, cartId, productVariantID string, quantity int) (*entities.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCartItem", ctx, tx, cartId, productVariantID, quantity)
	ret0, _ := ret[0].(*entities.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCartItem indicates an expected call of AddCartItem.
func (mr *MockRepositoryMockRecorder) AddCartItem(ctx, tx, cartId, productVariantID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCartItem", reflect.TypeOf((*MockRepository)(nil).AddCartItem), ctx, tx, cartId, productVariantID, quantity)
}

// BeginTransaction mocks base method.
func (m *MockRepository) BeginTransaction(ctx context.Context) (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockRepositoryMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockRepository)(nil).BeginTransaction), ctx)
}

// CreateCartShippingRates mocks base method.
func (m *MockRepository) CreateCartShippingRates(ctx context.Context, shippingRate []entities.CartShippingRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartShippingRates", ctx, shippingRate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCartShippingRates indicates an expected call of CreateCartShippingRates.
func (mr *MockRepositoryMockRecorder) CreateCartShippingRates(ctx, shippingRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartShippingRates", reflect.TypeOf((*MockRepository)(nil).CreateCartShippingRates), ctx, shippingRate)
}

// CreateNewCart mocks base method.
func (m *MockRepository) CreateNewCart(ctx context.Context, tx Transaction, customerID string) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCart", ctx, tx, customerID)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCart indicates an expected call of CreateNewCart.
func (mr *MockRepositoryMockRecorder) CreateNewCart(ctx, tx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCart", reflect.TypeOf((*MockRepository)(nil).CreateNewCart), ctx, tx, customerID)
}

// GetActiveCart mocks base method.
func (m *MockRepository) GetActiveCart(ctx context.Context, customerID string) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCart", ctx, customerID)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCart indicates an expected call of GetActiveCart.
func (mr *MockRepositoryMockRecorder) GetActiveCart(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCart", reflect.TypeOf((*MockRepository)(nil).GetActiveCart), ctx, customerID)
}

// GetCartByID mocks base method.
func (m *MockRepository) GetCartByID(ctx context.Context, cartID uuid.UUID) (*entities.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByID", ctx, cartID)
	ret0, _ := ret[0].(*entities.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByID indicates an expected call of GetCartByID.
func (mr *MockRepositoryMockRecorder) GetCartByID(ctx, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByID", reflect.TypeOf((*MockRepository)(nil).GetCartByID), ctx, cartID)
}

// GetCartItem mocks base method.
func (m *MockRepository) GetCartItem(ctx context.Context, cartID, productVariantID string) (*entities.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", ctx, cartID, productVariantID)
	ret0, _ := ret[0].(*entities.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockRepositoryMockRecorder) GetCartItem(ctx, cartID, productVariantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockRepository)(nil).GetCartItem), ctx, cartID, productVariantID)
}

// GetCartItems mocks base method.
func (m *MockRepository) GetCartItems(ctx context.Context, cartID string) ([]entities.CartItemDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", ctx, cartID)
	ret0, _ := ret[0].([]entities.CartItemDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockRepositoryMockRecorder) GetCartItems(ctx, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockRepository)(nil).GetCartItems), ctx, cartID)
}

// GetShippingRate mocks base method.
func (m *MockRepository) GetShippingRate(ctx context.Context, shippingRateID uuid.UUID) (*entities.CartShippingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingRate", ctx, shippingRateID)
	ret0, _ := ret[0].(*entities.CartShippingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingRate indicates an expected call of GetShippingRate.
func (mr *MockRepositoryMockRecorder) GetShippingRate(ctx, shippingRateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingRate", reflect.TypeOf((*MockRepository)(nil).GetShippingRate), ctx, shippingRateID)
}

// RemoveCartItem mocks base method.
func (m *MockRepository) RemoveCartItem(ctx context.Context, cartID, itemID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartItem", ctx, cartID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCartItem indicates an expected call of RemoveCartItem.
func (mr *MockRepositoryMockRecorder) RemoveCartItem(ctx, cartID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItem", reflect.TypeOf((*MockRepository)(nil).RemoveCartItem), ctx, cartID, itemID)
}

// UpdateCartItem mocks base method.
func (m *MockRepository) UpdateCartItem(ctx context.Context, tx Transaction, itemID string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", ctx, tx, itemID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockRepositoryMockRecorder) UpdateCartItem(ctx, tx, itemID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockRepository)(nil).UpdateCartItem), ctx, tx, itemID, quantity)
}

// UpdateCartShippingAndTaxRate mocks base method.
func (m *MockRepository) UpdateCartShippingAndTaxRate(ctx context.Context, cartID string, shippingRateId uuid.UUID, taxAmount decimal.Decimal, taxCurrency string, taxBreakdown json.JSON) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartShippingAndTaxRate", ctx, cartID, shippingRateId, taxAmount, taxCurrency, taxBreakdown)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartShippingAndTaxRate indicates an expected call of UpdateCartShippingAndTaxRate.
func (mr *MockRepositoryMockRecorder) UpdateCartShippingAndTaxRate(ctx, cartID, shippingRateId, taxAmount, taxCurrency, taxBreakdown interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartShippingAndTaxRate", reflect.TypeOf((*MockRepository)(nil).UpdateCartShippingAndTaxRate), ctx, cartID, shippingRateId, taxAmount, taxCurrency, taxBreakdown)
}

// UpdateCartStatus mocks base method.
func (m *MockRepository) UpdateCartStatus(ctx context.Context, tx Transaction, cartID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartStatus", ctx, tx, cartID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartStatus indicates an expected call of UpdateCartStatus.
func (mr *MockRepositoryMockRecorder) UpdateCartStatus(ctx, tx, cartID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartStatus", reflect.TypeOf((*MockRepository)(nil).UpdateCartStatus), ctx, tx, cartID, status)
}
