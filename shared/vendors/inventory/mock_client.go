// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/inventory/client.go

// Package inventory is a generated GoMock package.
package inventory

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/inventory/entities"
	providers "github.com/nurdsoft/nurd-commerce-core/shared/vendors/inventory/providers"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockClient) CreateOrder(ctx context.Context, req entities.CreateInventoryOrderRequest) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockClientMockRecorder) CreateOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockClient)(nil).CreateOrder), ctx, req)
}

// GetProductByID mocks base method.
func (m *MockClient) GetProductByID(ctx context.Context, req any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockClientMockRecorder) GetProductByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockClient)(nil).GetProductByID), ctx, req)
}

// GetProducts mocks base method.
func (m *MockClient) GetProducts(ctx context.Context, req any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockClientMockRecorder) GetProducts(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockClient)(nil).GetProducts), ctx, req)
}

// GetProvider mocks base method.
func (m *MockClient) GetProvider() providers.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider")
	ret0, _ := ret[0].(providers.ProviderType)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockClientMockRecorder) GetProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockClient)(nil).GetProvider))
}

// UpdateOrderStatus mocks base method.
func (m *MockClient) UpdateOrderStatus(ctx context.Context, req entities.UpdateInventoryOrderStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockClientMockRecorder) UpdateOrderStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockClient)(nil).UpdateOrderStatus), ctx, req)
}
