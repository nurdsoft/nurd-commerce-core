// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/payment/authorizenet/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/payment/authorizenet/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCustomerPaymentProfile mocks base method.
func (m *MockService) CreateCustomerPaymentProfile(ctx context.Context, req entities.CreateCustomerPaymentProfileRequest) (entities.CreateCustomerPaymentProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerPaymentProfile", ctx, req)
	ret0, _ := ret[0].(entities.CreateCustomerPaymentProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerPaymentProfile indicates an expected call of CreateCustomerPaymentProfile.
func (mr *MockServiceMockRecorder) CreateCustomerPaymentProfile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerPaymentProfile", reflect.TypeOf((*MockService)(nil).CreateCustomerPaymentProfile), ctx, req)
}

// CreateCustomerProfile mocks base method.
func (m *MockService) CreateCustomerProfile(ctx context.Context, req entities.CreateCustomerRequest) (entities.CreateCustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerProfile", ctx, req)
	ret0, _ := ret[0].(entities.CreateCustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerProfile indicates an expected call of CreateCustomerProfile.
func (mr *MockServiceMockRecorder) CreateCustomerProfile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerProfile", reflect.TypeOf((*MockService)(nil).CreateCustomerProfile), ctx, req)
}

// CreatePaymentTransaction mocks base method.
func (m *MockService) CreatePaymentTransaction(ctx context.Context, req entities.CreatePaymentTransactionRequest) (entities.CreatePaymentTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentTransaction", ctx, req)
	ret0, _ := ret[0].(entities.CreatePaymentTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentTransaction indicates an expected call of CreatePaymentTransaction.
func (mr *MockServiceMockRecorder) CreatePaymentTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentTransaction", reflect.TypeOf((*MockService)(nil).CreatePaymentTransaction), ctx, req)
}

// GetCustomerPaymentProfiles mocks base method.
func (m *MockService) GetCustomerPaymentProfiles(ctx context.Context, req entities.GetPaymentProfilesRequest) (entities.GetPaymentProfilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentProfiles", ctx, req)
	ret0, _ := ret[0].(entities.GetPaymentProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentProfiles indicates an expected call of GetCustomerPaymentProfiles.
func (mr *MockServiceMockRecorder) GetCustomerPaymentProfiles(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentProfiles", reflect.TypeOf((*MockService)(nil).GetCustomerPaymentProfiles), ctx, req)
}
