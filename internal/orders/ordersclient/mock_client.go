// Code generated by MockGen. DO NOT EDIT.
// Source: internal/orders/ordersclient/client.go

// Package ordersclient is a generated GoMock package.
package ordersclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/orders/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ProcessOrderStatus mocks base method.
func (m *MockClient) ProcessOrderStatus(ctx context.Context, req *entities.UpdateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrderStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrderStatus indicates an expected call of ProcessOrderStatus.
func (mr *MockClientMockRecorder) ProcessOrderStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrderStatus", reflect.TypeOf((*MockClient)(nil).ProcessOrderStatus), ctx, req)
}

// ProcessPaymentFailed mocks base method.
func (m *MockClient) ProcessPaymentFailed(ctx context.Context, paymentIntentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPaymentFailed", ctx, paymentIntentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPaymentFailed indicates an expected call of ProcessPaymentFailed.
func (mr *MockClientMockRecorder) ProcessPaymentFailed(ctx, paymentIntentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPaymentFailed", reflect.TypeOf((*MockClient)(nil).ProcessPaymentFailed), ctx, paymentIntentId)
}

// ProcessPaymentSucceeded mocks base method.
func (m *MockClient) ProcessPaymentSucceeded(ctx context.Context, paymentIntentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPaymentSucceeded", ctx, paymentIntentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPaymentSucceeded indicates an expected call of ProcessPaymentSucceeded.
func (mr *MockClientMockRecorder) ProcessPaymentSucceeded(ctx, paymentIntentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPaymentSucceeded", reflect.TypeOf((*MockClient)(nil).ProcessPaymentSucceeded), ctx, paymentIntentId)
}
