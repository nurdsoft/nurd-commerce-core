// Code generated by MockGen. DO NOT EDIT.
// Source: internal/address/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/address/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockRepository) CreateAddress(ctx context.Context, address *entities.Address) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", ctx, address)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockRepositoryMockRecorder) CreateAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockRepository)(nil).CreateAddress), ctx, address)
}

// DeleteAddress mocks base method.
func (m *MockRepository) DeleteAddress(ctx context.Context, customerID, addressID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", ctx, customerID, addressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockRepositoryMockRecorder) DeleteAddress(ctx, customerID, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockRepository)(nil).DeleteAddress), ctx, customerID, addressID)
}

// GetAddress mocks base method.
func (m *MockRepository) GetAddress(ctx context.Context, customerID, addressID string) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, customerID, addressID)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockRepositoryMockRecorder) GetAddress(ctx, customerID, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockRepository)(nil).GetAddress), ctx, customerID, addressID)
}

// GetAddresses mocks base method.
func (m *MockRepository) GetAddresses(ctx context.Context, customerID string) ([]entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", ctx, customerID)
	ret0, _ := ret[0].([]entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockRepositoryMockRecorder) GetAddresses(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockRepository)(nil).GetAddresses), ctx, customerID)
}

// UpdateAddress mocks base method.
func (m *MockRepository) UpdateAddress(ctx context.Context, address *entities.Address) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", ctx, address)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockRepositoryMockRecorder) UpdateAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockRepository)(nil).UpdateAddress), ctx, address)
}

// UpdateAddressField mocks base method.
func (m *MockRepository) UpdateAddressField(ctx context.Context, customerID, addressID string, details map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressField", ctx, customerID, addressID, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddressField indicates an expected call of UpdateAddressField.
func (mr *MockRepositoryMockRecorder) UpdateAddressField(ctx, customerID, addressID, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressField", reflect.TypeOf((*MockRepository)(nil).UpdateAddressField), ctx, customerID, addressID, details)
}
