// Code generated by MockGen. DO NOT EDIT.
// Source: internal/orders/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/orders/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSalesforceIDPerOrderItem mocks base method.
func (m *MockRepository) AddSalesforceIDPerOrderItem(ctx context.Context, ids map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSalesforceIDPerOrderItem", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSalesforceIDPerOrderItem indicates an expected call of AddSalesforceIDPerOrderItem.
func (mr *MockRepositoryMockRecorder) AddSalesforceIDPerOrderItem(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSalesforceIDPerOrderItem", reflect.TypeOf((*MockRepository)(nil).AddSalesforceIDPerOrderItem), ctx, ids)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, cartID uuid.UUID, order *entities.Order, orderItems []*entities.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, cartID, order, orderItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, cartID, order, orderItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, cartID, order, orderItems)
}

// GetOrderByAuthorizeNetPaymentID mocks base method.
func (m *MockRepository) GetOrderByAuthorizeNetPaymentID(ctx context.Context, authorizeNetPaymentID string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByAuthorizeNetPaymentID", ctx, authorizeNetPaymentID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByAuthorizeNetPaymentID indicates an expected call of GetOrderByAuthorizeNetPaymentID.
func (mr *MockRepositoryMockRecorder) GetOrderByAuthorizeNetPaymentID(ctx, authorizeNetPaymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByAuthorizeNetPaymentID", reflect.TypeOf((*MockRepository)(nil).GetOrderByAuthorizeNetPaymentID), ctx, authorizeNetPaymentID)
}

// GetOrderByID mocks base method.
func (m *MockRepository) GetOrderByID(ctx context.Context, orderID uuid.UUID) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockRepositoryMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockRepository)(nil).GetOrderByID), ctx, orderID)
}

// GetOrderByReference mocks base method.
func (m *MockRepository) GetOrderByReference(ctx context.Context, orderReference string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByReference", ctx, orderReference)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByReference indicates an expected call of GetOrderByReference.
func (mr *MockRepositoryMockRecorder) GetOrderByReference(ctx, orderReference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByReference", reflect.TypeOf((*MockRepository)(nil).GetOrderByReference), ctx, orderReference)
}

// GetOrderByStripePaymentIntentID mocks base method.
func (m *MockRepository) GetOrderByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByStripePaymentIntentID", ctx, stripePaymentIntentID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByStripePaymentIntentID indicates an expected call of GetOrderByStripePaymentIntentID.
func (mr *MockRepositoryMockRecorder) GetOrderByStripePaymentIntentID(ctx, stripePaymentIntentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByStripePaymentIntentID", reflect.TypeOf((*MockRepository)(nil).GetOrderByStripePaymentIntentID), ctx, stripePaymentIntentID)
}

// GetOrderItemsByID mocks base method.
func (m *MockRepository) GetOrderItemsByID(ctx context.Context, orderID uuid.UUID) ([]*entities.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByID", ctx, orderID)
	ret0, _ := ret[0].([]*entities.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByID indicates an expected call of GetOrderItemsByID.
func (mr *MockRepositoryMockRecorder) GetOrderItemsByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByID", reflect.TypeOf((*MockRepository)(nil).GetOrderItemsByID), ctx, orderID)
}

// GetOrderItemsByStripeRefundID mocks base method.
func (m *MockRepository) GetOrderItemsByStripeRefundID(ctx context.Context, stripeRefundID string) ([]*entities.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByStripeRefundID", ctx, stripeRefundID)
	ret0, _ := ret[0].([]*entities.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByStripeRefundID indicates an expected call of GetOrderItemsByStripeRefundID.
func (mr *MockRepositoryMockRecorder) GetOrderItemsByStripeRefundID(ctx, stripeRefundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByStripeRefundID", reflect.TypeOf((*MockRepository)(nil).GetOrderItemsByStripeRefundID), ctx, stripeRefundID)
}

// ListOrders mocks base method.
func (m *MockRepository) ListOrders(ctx context.Context, customerID uuid.UUID, limit int, cursor string, includeItems bool) ([]*entities.Order, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, customerID, limit, cursor, includeItems)
	ret0, _ := ret[0].([]*entities.Order)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockRepositoryMockRecorder) ListOrders(ctx, customerID, limit, cursor, includeItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockRepository)(nil).ListOrders), ctx, customerID, limit, cursor, includeItems)
}

// OrderReferenceExists mocks base method.
func (m *MockRepository) OrderReferenceExists(ctx context.Context, orderReference string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReferenceExists", ctx, orderReference)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderReferenceExists indicates an expected call of OrderReferenceExists.
func (mr *MockRepositoryMockRecorder) OrderReferenceExists(ctx, orderReference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReferenceExists", reflect.TypeOf((*MockRepository)(nil).OrderReferenceExists), ctx, orderReference)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, details map[string]interface{}, orderID, customerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, details, orderID, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, details, orderID, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, details, orderID, customerID)
}

// UpdateOrderWithOrderItems mocks base method.
func (m *MockRepository) UpdateOrderWithOrderItems(ctx context.Context, orderID uuid.UUID, orderData, orderItemsData map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderWithOrderItems", ctx, orderID, orderData, orderItemsData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderWithOrderItems indicates an expected call of UpdateOrderWithOrderItems.
func (mr *MockRepositoryMockRecorder) UpdateOrderWithOrderItems(ctx, orderID, orderData, orderItemsData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderWithOrderItems", reflect.TypeOf((*MockRepository)(nil).UpdateOrderWithOrderItems), ctx, orderID, orderData, orderItemsData)
}
