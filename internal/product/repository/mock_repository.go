// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/product/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, product *entities.Product) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, product)
}

// CreateVariant mocks base method.
func (m *MockRepository) CreateVariant(ctx context.Context, variant *entities.ProductVariant) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariant", ctx, variant)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariant indicates an expected call of CreateVariant.
func (mr *MockRepositoryMockRecorder) CreateVariant(ctx, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariant", reflect.TypeOf((*MockRepository)(nil).CreateVariant), ctx, variant)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, id string) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, id)
}

// FindByIDs mocks base method.
func (m *MockRepository) FindByIDs(ctx context.Context, ids []string) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockRepositoryMockRecorder) FindByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockRepository)(nil).FindByIDs), ctx, ids)
}

// FindVariantByID mocks base method.
func (m *MockRepository) FindVariantByID(ctx context.Context, id string) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVariantByID", ctx, id)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVariantByID indicates an expected call of FindVariantByID.
func (mr *MockRepositoryMockRecorder) FindVariantByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVariantByID", reflect.TypeOf((*MockRepository)(nil).FindVariantByID), ctx, id)
}

// FindVariantBySKU mocks base method.
func (m *MockRepository) FindVariantBySKU(ctx context.Context, sku string) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVariantBySKU", ctx, sku)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVariantBySKU indicates an expected call of FindVariantBySKU.
func (mr *MockRepositoryMockRecorder) FindVariantBySKU(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVariantBySKU", reflect.TypeOf((*MockRepository)(nil).FindVariantBySKU), ctx, sku)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, details map[string]interface{}, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, details, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, details, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, details, id)
}

// UpdateVariant mocks base method.
func (m *MockRepository) UpdateVariant(ctx context.Context, details map[string]interface{}, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariant", ctx, details, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVariant indicates an expected call of UpdateVariant.
func (mr *MockRepositoryMockRecorder) UpdateVariant(ctx, details, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariant", reflect.TypeOf((*MockRepository)(nil).UpdateVariant), ctx, details, id)
}
