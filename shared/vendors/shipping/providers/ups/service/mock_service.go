// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/shipping/providers/ups/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/shipping/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetShippingRates mocks base method.
func (m *MockService) GetShippingRates(ctx context.Context, shipment entities.Shipment) ([]entities.ShippingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingRates", ctx, shipment)
	ret0, _ := ret[0].([]entities.ShippingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingRates indicates an expected call of GetShippingRates.
func (mr *MockServiceMockRecorder) GetShippingRates(ctx, shipment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingRates", reflect.TypeOf((*MockService)(nil).GetShippingRates), ctx, shipment)
}

// ValidateAddress mocks base method.
func (m *MockService) ValidateAddress(ctx context.Context, address entities.Address) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAddress", ctx, address)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAddress indicates an expected call of ValidateAddress.
func (mr *MockServiceMockRecorder) ValidateAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAddress", reflect.TypeOf((*MockService)(nil).ValidateAddress), ctx, address)
}
