// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/inventory/salesforce/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/inventory/salesforce/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddOrderItems mocks base method.
func (m *MockService) AddOrderItems(ctx context.Context, items []*entities.OrderItem) (*entities.AddOrderItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderItems", ctx, items)
	ret0, _ := ret[0].(*entities.AddOrderItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrderItems indicates an expected call of AddOrderItems.
func (mr *MockServiceMockRecorder) AddOrderItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderItems", reflect.TypeOf((*MockService)(nil).AddOrderItems), ctx, items)
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, req *entities.CreateSFOrderRequest) (*entities.CreateSFOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, req)
	ret0, _ := ret[0].(*entities.CreateSFOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, req)
}

// CreatePriceBookEntry mocks base method.
func (m *MockService) CreatePriceBookEntry(ctx context.Context, req *entities.CreateSFPriceBookEntryRequest) (*entities.CreateSFPriceBookEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriceBookEntry", ctx, req)
	ret0, _ := ret[0].(*entities.CreateSFPriceBookEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePriceBookEntry indicates an expected call of CreatePriceBookEntry.
func (mr *MockServiceMockRecorder) CreatePriceBookEntry(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriceBookEntry", reflect.TypeOf((*MockService)(nil).CreatePriceBookEntry), ctx, req)
}

// CreateProduct mocks base method.
func (m *MockService) CreateProduct(ctx context.Context, req *entities.CreateSFProductRequest) (*entities.CreateSFProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, req)
	ret0, _ := ret[0].(*entities.CreateSFProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockServiceMockRecorder) CreateProduct(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockService)(nil).CreateProduct), ctx, req)
}

// CreateUserAccount mocks base method.
func (m *MockService) CreateUserAccount(ctx context.Context, req *entities.CreateSFUserRequest) (*entities.CreateSFUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, req)
	ret0, _ := ret[0].(*entities.CreateSFUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockServiceMockRecorder) CreateUserAccount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockService)(nil).CreateUserAccount), ctx, req)
}

// CreateUserAddress mocks base method.
func (m *MockService) CreateUserAddress(ctx context.Context, req *entities.CreateSFAddressRequest) (*entities.CreateSFAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddress", ctx, req)
	ret0, _ := ret[0].(*entities.CreateSFAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAddress indicates an expected call of CreateUserAddress.
func (mr *MockServiceMockRecorder) CreateUserAddress(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddress", reflect.TypeOf((*MockService)(nil).CreateUserAddress), ctx, req)
}

// DeleteUserAddress mocks base method.
func (m *MockService) DeleteUserAddress(ctx context.Context, addressId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAddress", ctx, addressId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAddress indicates an expected call of DeleteUserAddress.
func (mr *MockServiceMockRecorder) DeleteUserAddress(ctx, addressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAddress", reflect.TypeOf((*MockService)(nil).DeleteUserAddress), ctx, addressId)
}

// GetAccountByID mocks base method.
func (m *MockService) GetAccountByID(ctx context.Context, accountId string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, accountId)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockServiceMockRecorder) GetAccountByID(ctx, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockService)(nil).GetAccountByID), ctx, accountId)
}

// GetOrderItems mocks base method.
func (m *MockService) GetOrderItems(ctx context.Context, orderId string) (*entities.GetOrderItemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItems", ctx, orderId)
	ret0, _ := ret[0].(*entities.GetOrderItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItems indicates an expected call of GetOrderItems.
func (mr *MockServiceMockRecorder) GetOrderItems(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItems", reflect.TypeOf((*MockService)(nil).GetOrderItems), ctx, orderId)
}

// UpdateOrderStatus mocks base method.
func (m *MockService) UpdateOrderStatus(ctx context.Context, req *entities.UpdateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockServiceMockRecorder) UpdateOrderStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockService)(nil).UpdateOrderStatus), ctx, req)
}

// UpdateUserAccount mocks base method.
func (m *MockService) UpdateUserAccount(ctx context.Context, req *entities.UpdateSFUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAccount indicates an expected call of UpdateUserAccount.
func (mr *MockServiceMockRecorder) UpdateUserAccount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccount", reflect.TypeOf((*MockService)(nil).UpdateUserAccount), ctx, req)
}

// UpdateUserAddress mocks base method.
func (m *MockService) UpdateUserAddress(ctx context.Context, req *entities.UpdateSFAddressRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddress", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAddress indicates an expected call of UpdateUserAddress.
func (mr *MockServiceMockRecorder) UpdateUserAddress(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddress", reflect.TypeOf((*MockService)(nil).UpdateUserAddress), ctx, req)
}
