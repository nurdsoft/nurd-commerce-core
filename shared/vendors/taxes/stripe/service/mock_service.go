// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/taxes/stripe/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/taxes/stripe/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method.
func (m *MockService) CalculateTax(ctx context.Context, req *entities.CalculateTaxRequest) (*entities.CalculateTaxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTax", ctx, req)
	ret0, _ := ret[0].(*entities.CalculateTaxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTax indicates an expected call of CalculateTax.
func (mr *MockServiceMockRecorder) CalculateTax(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockService)(nil).CalculateTax), ctx, req)
}
