// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/productclient/client.go

// Package productclient is a generated GoMock package.
package productclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/product/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockClient) CreateProduct(ctx context.Context, request *entities.CreateProductRequest) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, request)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockClientMockRecorder) CreateProduct(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockClient)(nil).CreateProduct), ctx, request)
}

// CreateProductVariant mocks base method.
func (m *MockClient) CreateProductVariant(ctx context.Context, req *entities.CreateProductVariantRequest) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductVariant", ctx, req)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductVariant indicates an expected call of CreateProductVariant.
func (mr *MockClientMockRecorder) CreateProductVariant(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductVariant", reflect.TypeOf((*MockClient)(nil).CreateProductVariant), ctx, req)
}

// GetProduct mocks base method.
func (m *MockClient) GetProduct(ctx context.Context, request *entities.GetProductRequest) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, request)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockClientMockRecorder) GetProduct(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockClient)(nil).GetProduct), ctx, request)
}

// GetProductVariant mocks base method.
func (m *MockClient) GetProductVariant(ctx context.Context, req *entities.GetProductVariantRequest) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductVariant", ctx, req)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductVariant indicates an expected call of GetProductVariant.
func (mr *MockClientMockRecorder) GetProductVariant(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductVariant", reflect.TypeOf((*MockClient)(nil).GetProductVariant), ctx, req)
}

// GetProductVariantByID mocks base method.
func (m *MockClient) GetProductVariantByID(ctx context.Context, variantID string) (*entities.ProductVariant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductVariantByID", ctx, variantID)
	ret0, _ := ret[0].(*entities.ProductVariant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductVariantByID indicates an expected call of GetProductVariantByID.
func (mr *MockClientMockRecorder) GetProductVariantByID(ctx, variantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductVariantByID", reflect.TypeOf((*MockClient)(nil).GetProductVariantByID), ctx, variantID)
}

// GetProductsByIDs mocks base method.
func (m *MockClient) GetProductsByIDs(ctx context.Context, ids []string) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, ids)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockClientMockRecorder) GetProductsByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockClient)(nil).GetProductsByIDs), ctx, ids)
}

// UpdateProduct mocks base method.
func (m *MockClient) UpdateProduct(ctx context.Context, request *entities.UpdateProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockClientMockRecorder) UpdateProduct(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockClient)(nil).UpdateProduct), ctx, request)
}
