// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/payment/stripe/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/payment/stripe/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockService) CreateCustomer(ctx context.Context, req *entities.CreateCustomerRequest) (*entities.CreateCustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, req)
	ret0, _ := ret[0].(*entities.CreateCustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockServiceMockRecorder) CreateCustomer(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockService)(nil).CreateCustomer), ctx, req)
}

// CreatePaymentIntent mocks base method.
func (m *MockService) CreatePaymentIntent(ctx context.Context, req *entities.CreatePaymentIntentRequest) (*entities.CreatePaymentIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentIntent", ctx, req)
	ret0, _ := ret[0].(*entities.CreatePaymentIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentIntent indicates an expected call of CreatePaymentIntent.
func (mr *MockServiceMockRecorder) CreatePaymentIntent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentIntent", reflect.TypeOf((*MockService)(nil).CreatePaymentIntent), ctx, req)
}

// GetCustomerPaymentMethods mocks base method.
func (m *MockService) GetCustomerPaymentMethods(arg0 context.Context, customerId *string) (*entities.GetCustomerPaymentMethodsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentMethods", arg0, customerId)
	ret0, _ := ret[0].(*entities.GetCustomerPaymentMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentMethods indicates an expected call of GetCustomerPaymentMethods.
func (mr *MockServiceMockRecorder) GetCustomerPaymentMethods(arg0, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentMethods", reflect.TypeOf((*MockService)(nil).GetCustomerPaymentMethods), arg0, customerId)
}

// GetSetupIntent mocks base method.
func (m *MockService) GetSetupIntent(ctx context.Context, customerId *string) (*entities.GetSetupIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetupIntent", ctx, customerId)
	ret0, _ := ret[0].(*entities.GetSetupIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetupIntent indicates an expected call of GetSetupIntent.
func (mr *MockServiceMockRecorder) GetSetupIntent(ctx, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetupIntent", reflect.TypeOf((*MockService)(nil).GetSetupIntent), ctx, customerId)
}

// GetWebhookEvent mocks base method.
func (m *MockService) GetWebhookEvent(arg0 context.Context, req *entities.HandleWebhookEventRequest) (*entities.HandleWebhookEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEvent", arg0, req)
	ret0, _ := ret[0].(*entities.HandleWebhookEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEvent indicates an expected call of GetWebhookEvent.
func (mr *MockServiceMockRecorder) GetWebhookEvent(arg0, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEvent", reflect.TypeOf((*MockService)(nil).GetWebhookEvent), arg0, req)
}
