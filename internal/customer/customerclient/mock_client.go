// Code generated by MockGen. DO NOT EDIT.
// Source: internal/customer/customerclient/client.go

// Package customerclient is a generated GoMock package.
package customerclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/internal/customer/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCustomer mocks base method.
func (m *MockClient) GetCustomer(ctx context.Context) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockClientMockRecorder) GetCustomer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockClient)(nil).GetCustomer), ctx)
}

// GetCustomerByID mocks base method.
func (m *MockClient) GetCustomerByID(ctx context.Context, id string) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, id)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockClientMockRecorder) GetCustomerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockClient)(nil).GetCustomerByID), ctx, id)
}

// UpdateCustomerStripeID mocks base method.
func (m *MockClient) UpdateCustomerStripeID(ctx context.Context, id, stripeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerStripeID", ctx, id, stripeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerStripeID indicates an expected call of UpdateCustomerStripeID.
func (mr *MockClientMockRecorder) UpdateCustomerStripeID(ctx, id, stripeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerStripeID", reflect.TypeOf((*MockClient)(nil).UpdateCustomerStripeID), ctx, id, stripeID)
}
