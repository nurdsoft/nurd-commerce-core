// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/taxes/client.go

// Package taxes is a generated GoMock package.
package taxes

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/taxes/entities"
	providers "github.com/nurdsoft/nurd-commerce-core/shared/vendors/taxes/providers"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method.
func (m *MockClient) CalculateTax(ctx context.Context, req *entities.CalculateTaxRequest) (*entities.CalculateTaxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTax", ctx, req)
	ret0, _ := ret[0].(*entities.CalculateTaxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTax indicates an expected call of CalculateTax.
func (mr *MockClientMockRecorder) CalculateTax(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockClient)(nil).CalculateTax), ctx, req)
}

// GetProvider mocks base method.
func (m *MockClient) GetProvider() providers.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider")
	ret0, _ := ret[0].(providers.ProviderType)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockClientMockRecorder) GetProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockClient)(nil).GetProvider))
}
