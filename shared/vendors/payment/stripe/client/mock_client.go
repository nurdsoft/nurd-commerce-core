// Code generated by MockGen. DO NOT EDIT.
// Source: shared/vendors/payment/stripe/client/client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/nurdsoft/nurd-commerce-core/shared/vendors/payment/stripe/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockClient) CreateCustomer(ctx context.Context, req *entities.CreateCustomerRequest) (*entities.CreateCustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, req)
	ret0, _ := ret[0].(*entities.CreateCustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockClientMockRecorder) CreateCustomer(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockClient)(nil).CreateCustomer), ctx, req)
}

// CreatePaymentIntent mocks base method.
func (m *MockClient) CreatePaymentIntent(ctx context.Context, req *entities.CreatePaymentIntentRequest) (*entities.CreatePaymentIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentIntent", ctx, req)
	ret0, _ := ret[0].(*entities.CreatePaymentIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentIntent indicates an expected call of CreatePaymentIntent.
func (mr *MockClientMockRecorder) CreatePaymentIntent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentIntent", reflect.TypeOf((*MockClient)(nil).CreatePaymentIntent), ctx, req)
}

// GetCustomerPaymentMethods mocks base method.
func (m *MockClient) GetCustomerPaymentMethods(ctx context.Context, customerId *string) (*entities.GetCustomerPaymentMethodsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentMethods", ctx, customerId)
	ret0, _ := ret[0].(*entities.GetCustomerPaymentMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentMethods indicates an expected call of GetCustomerPaymentMethods.
func (mr *MockClientMockRecorder) GetCustomerPaymentMethods(ctx, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentMethods", reflect.TypeOf((*MockClient)(nil).GetCustomerPaymentMethods), ctx, customerId)
}

// GetSetupIntent mocks base method.
func (m *MockClient) GetSetupIntent(ctx context.Context, customerId *string) (*entities.GetSetupIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetupIntent", ctx, customerId)
	ret0, _ := ret[0].(*entities.GetSetupIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetupIntent indicates an expected call of GetSetupIntent.
func (mr *MockClientMockRecorder) GetSetupIntent(ctx, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetupIntent", reflect.TypeOf((*MockClient)(nil).GetSetupIntent), ctx, customerId)
}

// GetWebhookEvent mocks base method.
func (m *MockClient) GetWebhookEvent(ctx context.Context, req *entities.HandleWebhookEventRequest) (*entities.HandleWebhookEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEvent", ctx, req)
	ret0, _ := ret[0].(*entities.HandleWebhookEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEvent indicates an expected call of GetWebhookEvent.
func (mr *MockClientMockRecorder) GetWebhookEvent(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEvent", reflect.TypeOf((*MockClient)(nil).GetWebhookEvent), ctx, req)
}
